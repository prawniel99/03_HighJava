package kr.or.ddit.basic;

import java.io.IOException;
import java.io.InputStream;
import java.util.Scanner;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import kr.or.ddit.vo.LprodVO;

// JDBC 예제 중 'JdbcTest05.java'를 Mybatis로 처리하는 프로그램을 작성하시오.
// 핵심 기능은 lprod_gu가 중복이 되면 새로 입력하도록 하는 기능이다.
// 그럼 lprod_id는 입력받지 않고, 맥스+1로 설정한다.

public class JdbcToMybatis {

	public static void main(String[] args) {

		Scanner scan = new Scanner(System.in);

		// 1. MyBatis의 환경 설정 파일(mybatis-config.xml)을 읽어와서 그 내용을 처리한 후
		// 처리된 결과를 갖는 SqlSessionFactory객체를 생성한다.

		InputStream in = null; // 스트림 객체 변수 선언
		SqlSessionFactory sqlSessionFactory = null; // SqlSessionFactory객체 변수 선언

		try {
			// 1-1. 환경 설정 파일을 읽어 올 스트림 객체를 생성한다.
			in = Resources.getResourceAsStream("kr/or/ddit/mybatis/config/mybatis-config.xml");

			// 1-2. 환경 설정 파일을 읽어와 환경 설정 작업을 수행하고 작업이 완료되면 SqlSessionFactory객체를 생성한다.
			sqlSessionFactory = new SqlSessionFactoryBuilder().build(in);
		} catch (Exception e) {
			System.out.println("MyBatis 초기화 실패");
			e.printStackTrace();
		} finally {
			if (in != null)
				try {
					in.close();
				} catch (IOException e) {
					
				}
		}
		
		
		// insert
		System.out.println("Lprod_gu 입력 >> ");
		String lprodGu = scan.next();
		
		System.out.println("Lprod_nm 입력 >> ");
		String lprodNm = scan.next();
		
		// insert할 데이터들을 VO객체에 저장한다.
		LprodVO lvo = new LprodVO();
		lvo.setLprod_gu(lprodGu);
		lvo.setLprod_nm(lprodNm);
		
		// 중복 확인하기
		try {
			
		} catch (Exception e) {
		
		}
		
		
		
		SqlSession session = null;
		try {
			// SQL문을 호출해서 실행할 수 있는 SqlSession 객체를 생성한다.
			// ==> SqlSessionFactory 객체의 openSession() 메소드를 이용한다.
			// 형식) SqlSessionFactory객체.openSession(논리값)
			// ==> '논리값'이 true이면 AutoCommit이 활성화된 상태로 생성되고
			// '논리값'이 false이거나 생략되면 AutoCommit이 비활성화된 상태로 생성된다.
			session = sqlSessionFactory.openSession();
		
			// SqlSession 객체를 이용하여 처리할 SQL문을 호출해서 실행한다.
			// 형식) SqlSession객체.insert("namespace속성값.id속성값", 파라미터값);
			// ==> 반환값: 실행에 성공한 레코드 수
			int insertCnt = session.insert("jdbc.insertLprod", lvo);

			// SqlSession객체를 생성할 때 AutoCommit을 비활성화된 상태로 생성했을 때에는
			// commit을 직접 실행해야 한다.
			if(insertCnt>0){
				session.commit();
				System.out.println("insert 작업 성공");
			} else {
				System.out.println("insert 작업 실패");
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 작업이 끝나면 SqlSession 객체를 닫아준다. session.close();
		}
		
		System.out.println("-----------------------------------------------------------------------");
		scan.close();
	}

}
