package kr.or.ddit.member.controller;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.or.ddit.member.service.MemberService;
import kr.or.ddit.member.vo.MemberVO;
import kr.or.ddit.member.vo.AdminVO;

@WebServlet("/member/login.do")
public class LoginController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private MemberService memberService;

	// 서블릿 초기화 메소드
	public void init() {
		String baseURL = getServletContext().getInitParameter("baseURL");
		memberService = MemberService.getInstance(baseURL);
	}

	// GET 요청 처리 (로그인 페이지 표시)
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// 저장된 아이디 쿠키 확인
		Cookie[] cookies = request.getCookies();
		if (cookies != null) {
			for (Cookie cookie : cookies) {
				if ("savedId".equals(cookie.getName())) {
					request.setAttribute("savedId", cookie.getValue());
					break;
				}
			}
		}
		// 로그인 페이지로 포워딩
		request.getRequestDispatcher("/WEB-INF/views/member/Login.jsp").forward(request, response);
	}

	// POST 요청 처리 (로그인 처리)
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String memId = request.getParameter("memId");
		String memPass = request.getParameter("memPass");
		String saveId = request.getParameter("saveId");
		String userType = request.getParameter("userType");

		try {
	        // 디버깅을 위한 로그 추가
	        System.out.println("Attempting login - ID: " + memId + ", UserType: " + userType);

	        if ("admin".equals(userType)) {
	            // 관리자 로그인 처리
	            AdminVO admin = memberService.loginAdmin(memId, memPass);
	            if (admin != null) {
	                // 관리자 로그인 성공
	                HttpSession session = request.getSession();
	                session.setAttribute("loggedInAdmin", admin);
	                session.setAttribute("userType", "admin");
	                
	                // 아이디 저장 처리
	                handleSaveId(request, response, memId, saveId);
	                
	                System.out.println("Admin login successful. Redirecting to dashboard.");
	                
	                // 관리자 대시보드로 리다이렉트
	                response.sendRedirect(request.getContextPath() + "/member/adminDashboard.do");
	                return;
	            }
	        } else {
	            // 일반 회원 로그인 처리
	            MemberVO member = memberService.getMemberById(memId);
	            if (member != null && memberService.login(memId, memPass)) {
	                // 일반 회원 로그인 성공
	                HttpSession session = request.getSession();
	                session.setAttribute("loggedInMember", member);
	                session.setAttribute("userType", "member");
	                
	                // 아이디 저장 처리
	                handleSaveId(request, response, memId, saveId);
	                
	                System.out.println("Member login successful. Redirecting to index.");
	                
	                // 메인 페이지로 리다이렉트
	                response.sendRedirect(request.getContextPath() + "/index.jsp");
	                return;
	            }
	        }
	        
	        // 로그인 실패
	        System.out.println("Login failed for ID: " + memId);
	        request.setAttribute("error", "아이디 또는 비밀번호가 올바르지 않습니다.");
	        request.getRequestDispatcher("/WEB-INF/views/member/Login.jsp").forward(request, response);
	    } catch (Exception e) {
	        e.printStackTrace();
	        request.setAttribute("error", "로그인 중 오류가 발생했습니다.");
	        request.getRequestDispatcher("/WEB-INF/views/member/Login.jsp").forward(request, response);
	    }
	}

	// 아이디 저장 처리 메소드
	private void handleSaveId(HttpServletRequest request, HttpServletResponse response, String memId, String saveId) {
		if ("on".equals(saveId)) {
			Cookie cookie = new Cookie("savedId", memId);
			cookie.setMaxAge(7 * 24 * 60 * 60); // 7일 동안 유효
			response.addCookie(cookie);
		} else {
			Cookie cookie = new Cookie("savedId", "");
			cookie.setMaxAge(0); // 쿠키 삭제
			response.addCookie(cookie);
		}
	}
}