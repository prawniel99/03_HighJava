package kr.or.ddit.member.controller;

/**
 * 로그인 처리를 담당하는 컨트롤러
 * 
 * 이 서블릿은 사용자의 로그인 요청을 처리합니다.
 * - GET 요청: 로그인 페이지 표시
 * - POST 요청: 로그인 처리 및 세션 생성
 * - 일반 회원과 관리자 로그인 구분 처리
 * - 로그인 성공/실패에 따른 리다이렉션
 */
import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.or.ddit.member.service.MemberService;
import kr.or.ddit.member.vo.AdminVO;
import kr.or.ddit.member.vo.MemberVO;

@WebServlet("/member/login.do")
public class LoginController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private MemberService memberService;

	@Override
	public void init() throws ServletException {
		super.init();
		String baseURL = getServletContext().getInitParameter("baseURL");
		memberService = MemberService.getInstance(baseURL);
	}

	// GET 요청 처리 (로그인 페이지 표시)
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 저장된 아이디 쿠키 확인
		Cookie[] cookies = request.getCookies();
		if (cookies != null) {
			for (Cookie cookie : cookies) {
				if ("savedId".equals(cookie.getName())) {
					request.setAttribute("savedId", cookie.getValue());
					break;
				}
			}
		}
		// 이전 페이지 URL을 세션에 저장
		String referer = request.getHeader("Referer");
		if (referer != null && !referer.contains("/member/login.do")) {
			request.getSession().setAttribute("prevPage", referer);
		}
		// 로그인 페이지로 포워딩
		request.getRequestDispatcher("/WEB-INF/views/member/Login.jsp").forward(request, response);
	}

	// POST 요청 처리 (로그인 처리)
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String memId = request.getParameter("memId");
		String memPass = request.getParameter("memPass");
		String saveId = request.getParameter("saveId");
		String userType = request.getParameter("userType");
		String prevPage = (String) request.getSession().getAttribute("prevPage");

		 try {
	            boolean loginSuccessful = false;
	            String redirectURL = request.getContextPath() + "/main?view=index"; // 기본 리다이렉트 URL

	            HttpSession session = request.getSession();
	            // 세션 유지 시간을 30분(1800초)으로 설정
	            session.setMaxInactiveInterval(1800);

	            if ("admin".equals(userType)) {
	                AdminVO admin = memberService.loginAdmin(memId, memPass);
	                if (admin != null) {
	                    session.setAttribute("loggedInAdmin", admin);
	                    session.setAttribute("userType", "admin");
	                    loginSuccessful = true;
	                    redirectURL = request.getContextPath() + "/member/adminDashboard.do";
	                }
	            } else {
	                MemberVO member = memberService.getMemberById(memId);
	                if (member != null && memberService.login(memId, memPass)) {
	                    session.setAttribute("loggedInMember", member);
	                    session.setAttribute("userType", "member");
	                    loginSuccessful = true;
	                    if (prevPage != null && !prevPage.isEmpty()) {
	                        redirectURL = prevPage;
	                    }
	                }
	            }

	            if (loginSuccessful) {
	                handleSaveId(request, response, memId, saveId);
	                // 세션에서 prevPage 속성 제거
	                session.removeAttribute("prevPage");
	                response.sendRedirect(redirectURL);
	                return;
	            }
	            
	            // 로그인 실패 처리
	            request.setAttribute("error", "아이디 또는 비밀번호가 올바르지 않습니다.");
	            request.getRequestDispatcher("/WEB-INF/views/member/Login.jsp").forward(request, response);
	        } catch (Exception e) {
	            e.printStackTrace();
	            request.setAttribute("error", "로그인 중 오류가 발생했습니다.");
	            request.getRequestDispatcher("/WEB-INF/views/member/Login.jsp").forward(request, response);
	        }
	    }

	// 아이디 저장 처리 메소드
	private void handleSaveId(HttpServletRequest request, HttpServletResponse response, String memId, String saveId) {
		if ("on".equals(saveId)) {
			Cookie cookie = new Cookie("savedId", memId);
			cookie.setMaxAge(7 * 24 * 60 * 60); // 7일 동안 유효
			response.addCookie(cookie);
		} else {
			Cookie cookie = new Cookie("savedId", "");
			cookie.setMaxAge(0); // 쿠키 삭제
			response.addCookie(cookie);
		}
	}
}